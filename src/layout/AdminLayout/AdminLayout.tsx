import React, {
  PropsWithChildren,
  useCallback,
  useEffect,
  useState,
} from "react";
import { useResizeDetector } from "react-resize-detector";
import Head from "next/head";
import { Container } from "react-bootstrap";
import Sidebar, { SidebarOverlay } from "@layout/AdminLayout/Sidebar/Sidebar";
import Header from "@layout/AdminLayout/Header/Header";
import Footer from "@layout/AdminLayout/Footer/Footer";
import { useRouter } from "next/router";

export default function AdminLayout({ children }: PropsWithChildren) {
  // Show status for xs screen
  const [isShowSidebar, setIsShowSidebar] = useState(false);

  // Show status for md screen and above
  const [isShowSidebarMd, setIsShowSidebarMd] = useState(true);

  const toggleIsShowSidebar = () => {
    setIsShowSidebar(!isShowSidebar);
  };

  const toggleIsShowSidebarMd = () => {
    const newValue = !isShowSidebarMd;
    localStorage.setItem("isShowSidebarMd", newValue ? "true" : "false");
    setIsShowSidebarMd(newValue);
  };

  // Clear and reset sidebar
  const resetIsShowSidebar = () => {
    setIsShowSidebar(false);
  };

  const onResize = useCallback(() => {
    resetIsShowSidebar();
  }, []);

  const { ref } = useResizeDetector({ onResize });

  // On first time load only
  useEffect(() => {
    if (localStorage.getItem("isShowSidebarMd")) {
      setIsShowSidebarMd(localStorage.getItem("isShowSidebarMd") === "true");
    }
  }, [setIsShowSidebarMd]);

  const router = useRouter();
  let { asPath } = router;
  let pathname = asPath;
  // Replace / with | and _ with space in the pathname
  pathname = pathname.replace(/\//g, " | ").replace(/_/g, " ").toUpperCase();
  const [noNetwork, setNoNetwork] = useState("");
  useEffect(() => {
    function handleNetworkChange() {
      const isOnline = navigator.onLine;
      if (!isOnline) {
        // Display a notification
        setNoNetwork("No network connection, trying to reconnect...");
      }
    }

    window.addEventListener("offline", handleNetworkChange);
    window.addEventListener("online", handleNetworkChange);

    return () => {
      window.removeEventListener("offline", handleNetworkChange);
      window.removeEventListener("online", handleNetworkChange);
    };
  }, []);

  return (
    <>
      <Head>
        <title>ACCEPTED MANAGEMENT SYSTEM {pathname}</title>
        <meta name="description" content="Generated by create next app" />
        <link
          rel="icon"
          href="/assets/img/273198851_1788065084723794_5154145265366763313_n (1).jpg"
        />
        <link
          href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:ital,wght@0,200..800;1,200..800&display=swap"
          rel="stylesheet"
        />
      </Head>
      {noNetwork && (
        <div
          className="alert alert-danger mb-0 border-0 rounded-0 text-end p-2 bg-warning fw-bold position-fixed w-100 shadow-lg bottom-0 text-uppercase"
          role="alert"
        >
          {noNetwork}
        </div>
      )}
      <div ref={ref} className="position-absolute w-100" />

      <Sidebar isShow={isShowSidebar} isShowMd={isShowSidebarMd} />
      <div className="wrapper">
        <div className="full-content-wrapper radius-large d-flex flex-column content-body">
          <Header
            toggleSidebar={toggleIsShowSidebar}
            toggleSidebarMd={toggleIsShowSidebarMd}
          />
          <div className="body flex-grow-1 px-sm-2 mb-4">
            <Container fluid="xl" className="w-100">
              {children}
            </Container>
          </div>
        </div>
      </div>

      <SidebarOverlay
        isShowSidebar={isShowSidebar}
        toggleSidebar={toggleIsShowSidebar}
      />
    </>
  );
}
